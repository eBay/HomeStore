//  tagged pointer, for aba prevention
//
//  Copyright (C) 2008, 2009 Tim Blechmann, based on code by Cory Nelson
//
//  Distributed under the Boost Software License, Version 1.0. (See
//  accompanying file LICENSE_1_0.txt or copy at
//  http://www.boost.org/LICENSE_1_0.txt)
/*
 * Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

/*
 * Modified by Kadayam, Hari on 03/06/17 for atomic smart pointer.
 */
#pragma once

#include <cstdint>

namespace homeds {
#if defined(__x86_64__) || defined(_M_X64)

#define TAGGED_PTR_MASK 0x0000FFFFFFFFFFFFUL
#define TAGGED_COUNT_MASK 0xFFFF000000000000
#define FIRST_TAG_VALUE 0x0001000000000000UL
#define TAGGED_PTR_BITS 48

template < typename T >
struct tagged_ptr {
    typedef uint64_t compressed_ptr_t;
    typedef uint16_t tag_t;

private:
    static const int tag_index = 3;

private:
    union cast_unit {
        compressed_ptr_t ptr;
        tag_t tag[4];
    };

    cast_unit m_value;

public:
    tagged_ptr() { m_value.ptr = 0; }
    tagged_ptr(tagged_ptr const& o) : m_value(o.m_value) {}
    tagged_ptr(T* ptr, tag_t t) : m_value(pack_value(ptr, t)) {}
    tagged_ptr(compressed_ptr_t cp) : m_value(cp) {}

    tagged_ptr& operator=(tagged_ptr const& p) = default;

    void set(T* p, tag_t t) { m_value = pack_value(p, t); }

    bool operator==(volatile tagged_ptr const& o) const { return (m_value.ptr == o.m_value.ptr); }
    bool operator!=(volatile tagged_ptr const& o) const { return !operator==(o); }

    T* get_ptr() const {
        auto p = m_value.ptr;
        return (extract_ptr(p));
    }

    void set_ptr(T* p) {
        tag_t t = get_tag();
        m_value = pack_value(p, t);
    }

    tag_t get_tag() const {
        auto p = m_value.ptr;
        return extract_tag(p);
    }

    void set_tag(tag_t t) {
        T* p = get_ptr();
        m_value = pack_value(p, t);
    }

    void inc_tag() { m_value.ptr += FIRST_TAG_VALUE; }

    void inc_tag(int count) { m_value.ptr += (FIRST_TAG_VALUE * count); }

    void dec_tag() { m_value.ptr -= FIRST_TAG_VALUE; }

    void dec_tag(int count) { m_value.ptr -= (FIRST_TAG_VALUE * count); }

    T& operator*() const { return *get_ptr(); }

    T* operator->() const { return get_ptr(); }

    operator bool(void) const { return get_ptr() != 0; }

    compressed_ptr_t get_packed() const { return m_value.ptr; }

private:
    static cast_unit pack_value(T* ptr, uint16_t tag) {
        cast_unit ret;
        ret.ptr = compressed_ptr_t(ptr);
        ret.tag[tag_index] = tag;
        return ret;
    }

    static T* extract_ptr(volatile compressed_ptr_t const& i) { return (T*)(i & TAGGED_PTR_MASK); }

    static tag_t extract_tag(volatile compressed_ptr_t const& i) {
        cast_unit cu;
        cu.ptr = i;
        return cu.tag[tag_index];
    }

} __attribute__((packed));

#else
#error unsupported platform for tagged pointer
#endif
} // namespace homeds
