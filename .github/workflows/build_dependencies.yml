name: Conan Build

on:
  workflow_call:
    inputs:
      platform:
        required: false
        default: 'ubuntu-22.04'
        type: string
      branch:
        required: true
        type: string
      build-type:
        required: true
        type: string
      malloc-impl:
        required: true
        type: string
      prerelease:
        required: true
        type: string
      tooling:
        required: false
        type: string
        default: 'None'
      testing:
        required: false
        type: string
        default: 'False'
  workflow_dispatch:
    inputs:
      platform:
        required: true
        type: choice
        options:
          - ubuntu-22.04
          - ubuntu-20.04
          - macos-13
          - macos-12
        default: 'ubuntu-22.04'
      branch:
        required: true
        type: string
      build-type:
        required: true
        type: choice
        options:
          - Debug
          - Release
          - RelWithDebInfo
      malloc-impl:
        description: 'Allocation Library'
        required: true
        type: choice
        options:
          - libc
          - tcmalloc
          - jemalloc
      prerelease:
        description: 'Fault Instrumentation'
        required: false
        type: choice
        options:
          - 'True'
          - 'False'
        default: 'False'
      tooling:
        required: false
        type: choice
          - 'Sanitize'
          - 'Coverage'
          - 'None'
        default: 'None'
      testing:
        description: 'Build and Run'
        required: true
        type: choice
        options:
          - 'True'
          - 'False'
        default: 'True'

jobs:
  BuildHomestore:
    runs-on: ${{ inputs.platform }}
    timeout-minutes: 1440
    steps:
    - name: Recover space
      run: |
        df -h
        sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
        sudo docker image prune --all --force
        sudo docker builder prune -a
        df -h

    - name: Retrieve Code
      uses: actions/checkout@main
      with:
        ref: ${{ inputs.branch }}
      if: ${{ inputs.testing == 'True' }}

    - name: Retrieve Recipe
      uses: actions/checkout@main
      with:
        repository: hkadayam/Homestore
        ref: ${{ inputs.branch }}
      if: ${{ inputs.testing == 'False' }}

    - name: Restore Dependency Cache
      id: restore-cache
      uses: actions/cache/restore@v4
      with:
        path: |
          ~/.conan2/p
        key: HomestoreDeps-${{ inputs.platform }}-${{ inputs.build-type }}-${{ inputs.malloc-impl }}-${{ inputs.prerelease }}
        fail-on-cache-miss: ${{ inputs.fail_on_cache_miss }}

    - name: Retrieve IOManager code
      uses: actions/checkout@main
      with:
        repository: hkadayam/iomanager
        path: import/iomgr
        ref: master

    - name: Retrieve NuraftMesg code
      uses: actions/checkout@main
      with:
        repository: hkadayam/nuraft_mesg
        path: import/nuraft_mesg
        ref: main

    - name: Retrieve Sisl code
      uses: actions/checkout@main
      with:
        repository: hkadayam/sisl
        path: import/sisl
        ref: master

    - name: Setup Conan
      uses: hkadayam/sisl/.github/actions/setup_conan@master
      with:
        platform: ${{ inputs.platform }}

    - name: Export Recipes and DepsBuild Env
      run: |
        conan export import/sisl --user oss --channel master
        cd import/sisl && ./prepare.sh && cd ../..
        conan export import/iomgr --user oss --channel master
        cd import/iomgr && ./prepare.sh && cd ../..
        conan export import/nuraft_mesg --user oss --channel main
        cd import/nuraft_mesg/ && ./prepare.sh && cd ../..

    - name: Build Homestore Dependencies
      id : build-deps
      run: |
        du -sh ~/.conan2/p | awk '{printf("size=%d\n", $1)}' > $GITHUB_OUTPUT
        conan install \
            -o "sisl/*:prerelease=${{ inputs.prerelease }}" \
            -o "sisl/*:malloc_impl=${{ inputs.malloc-impl }}" \
            -c tools.build:skip_test=True \
            -s build_type=${{ inputs.build-type }} \
            --build missing \
            .

    - name: Remove Prior Dependencies
      id : remove-prior-deps
      run: |
        conan remove -c -p "build_type=${{ inputs.build-type }}" '*:*#!latest'
        rm -rf ~/.conan2/p/b/*/b
        rm -rf ~/.conan2/p/*/b ~/.conan2/p/*/s
        du -sh ~/.conan2/p | awk '{printf("size=%d\n", $1)}' > $GITHUB_OUTPUT
        df -h

    - name: Delete Previous Cache
      continue-on-error: true
      run: |
        gh extension install actions/gh-actions-cache
        gh actions-cache delete "HomestoreDeps-${{ inputs.platform }}-${{ inputs.build-type }}-${{ inputs.malloc-impl }}-${{ inputs.prerelease }}" --confirm
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      if: ${{ github.event_name != 'pull_request' && steps.build-deps.outputs.size != steps.remove-prior-deps.outputs.size }}

    - name: Save Dependency Cache
      uses: actions/cache/save@v4
      with:
        path: |
          ~/.conan2/p
        key: HomestoreDeps-${{ inputs.platform }}-${{ inputs.build-type }}-${{ inputs.malloc-impl }}-${{ inputs.prerelease }}
      if: ${{ github.event_name != 'pull_request' && steps.build-deps.outputs.size != steps.remove-prior-deps.outputs.size }}

    - name: Setup tmate session
      uses: mxschmitt/action-tmate@v3
      with:
        limit-access-to-actor: true
        detached: true
      if: ${{ inputs.testing == 'True' || inputs.tooling == 'Coverage' }}

    - name: Create and Test Package
      run: |
        sanitize=$([[ "${{ inputs.tooling }}" == "Sanitize" ]] && echo "True" || echo "False")
        skip_test=$([[ "${{ inputs.testing }}" == "True" ]] && echo "False" || echo "True") 
        conan create \
            -o "sisl/*:prerelease=${{ inputs.prerelease }}" \
            -o "sisl/*:malloc_impl=${{ inputs.malloc-impl }}" \
            -o "homestore/*:sanitize=${sanitize}" \
            -c tools.build:skip_test=${skip_test} \
            -s build_type=${{ inputs.build-type }} \
            --build missing \
            .
      if: ${{ inputs.tooling != 'Coverage' }}

    - name: Code Coverage Run
      run: |
        du -sh ~/.conan2/p/*
        df -h
        conan build \
            -o "sisl/*:prerelease=${{ inputs.prerelease }}" \
            -o "sisl/*:malloc_impl=${{ inputs.malloc-impl }}" \
            -o coverage=True \
            -c tools.build:skip_test=False \
            -s build_type=${{ inputs.build-type }} \
            --build missing \
            .
      if: ${{ inputs.tooling == 'Coverage' }}

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        gcov: true
      if: ${{ inputs.tooling == 'Coverage' }}
